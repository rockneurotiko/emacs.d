; @begin(76331830)@ - Do not edit these lines - added automatically!
(if (file-exists-p "/home/rock/Descargas/temp/CiaoDE-1.15-1781-g328b907/emacs-mode/ciao-site-file.el")
(load-file "/home/rock/Descargas/temp/CiaoDE-1.15-1781-g328b907/emacs-mode/ciao-site-file.el")
)
; @end(76331830)@ - End of automatically added lines.

(menu-bar-mode 1)
(tool-bar-mode -1)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   (quote
    ("7bde52fdac7ac54d00f3d4c559f2f7aa899311655e7eb20ec5491f3b5c533fe8" "0c29db826418061b40564e3351194a3d4a125d182c6ee5178c237a7364f0ff12" default)))
 '(ido-everywhere t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;(require 'emacs-color-themes)
;(load-theme 'tango-dark)

(add-hook 'after-init-hook (lambda () (load-theme 'spolsky)))
;(load-theme 'spolsky t)

(require 'package)
(add-to-list 'package-archives
             '("melpa"."http://melpa.milkbox.net/packages/"))
(package-initialize)

; ido and flx
(require 'ido)
(require 'flx)
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.
(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
(setq ido-everywhere 1)
(setq ido-file-extensions-order '(".py" ".org" ".txt" ".cfg" ))
(setq ido-ignore-extensions t)



;; HELM <3
(require 'helm)
(require 'helm-config)
(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-unset-key (kbd "C-x c"))(global-set-key (kbd "C-c h") 'helm-command-prefix)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-x C-f") 'helm-find-files)

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-buffers-fuzzy-matching           t ; fuzzy matching buffer names when non--nil
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t)
(helm-mode 1)

;; Undo properties
(require 'undo-tree)
(global-undo-tree-mode 1)
(defalias 'redo 'undo-tree-redo)
(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "C-S-z") 'redo)

;; js completion
(add-hook 'js2-mode-hook 'ac-js2-mode)
(setq ac-js2-evaluate-calls t)

;(require 'angular-snippets)
;(eval-after-load "sgml-mode"
;  '(define-key html-mode-map (kbd "C-c C-d") 'ng-snip-show-docs-at-point))

;; scrolling settings
;(setq scroll-preserve-screen-position t)
;(setq scroll-margin 2)
;(setq scroll-step 1)


(global-set-key (kbd "M-S-<left>") 'windmove-left)
(global-set-key (kbd "M-S-<right>") 'windmove-right)
(global-set-key (kbd "M-S-<up>") 'windmove-up)
(global-set-key (kbd "M-S-<down>") 'windmove-down)

;; Guardar sesion
(desktop-save-mode 1)

;; Numero de lineas
(require 'linum)
(global-linum-mode 1)
(setq linum-disabled-modes-list '(mu4e-headers-mode))
(defun linum-on ()
  (unless (or (minibufferp) (member major-mode linum-disabled-modes-list))
    (linum-mode 1)))

;; Autocompletado
(require 'auto-complete)
(global-auto-complete-mode t)

;; memory
(setq gc-cons-threshold 20000000)

;;JULIA
(load "~/.emacs.d/plugins/ESS/lisp/ess-site.el")
(setq inferior-julia-program-name "julia")


;; My funcs

;; Ctrl enter, new line
(defun sublime-new-line ()
  "Go to next line and indent wherever you are in a line"
  (interactive)
  (end-of-line)
  (newline-and-indent))
(global-set-key [C-return] 'sublime-new-line)

;; Comment/uncomment region
(defun comment-or-uncomment-region-or-line ()
  "Like comment-or-uncomment-region, but if there's no mark \(that means no
region\) apply comment-or-uncomment to the current line"
  (interactive)
  (if (not mark-active)
      (comment-or-uncomment-region
        (line-beginning-position) (line-end-position))
      (if (< (point) (mark))
          (comment-or-uncomment-region (point) (mark))
        (comment-or-uncomment-region (mark) (point)))))
(global-set-key (kbd "C-/") 'comment-or-uncomment-region-or-line)
